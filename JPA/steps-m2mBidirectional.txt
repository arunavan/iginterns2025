package com.insight.m2m;
import java.util.HashSet;
import java.util.Set;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
@Entity
@Table(name="igproductm2m1")
public class Product  {
	@Id
	private int id;
	private String name;
	private double price;
	public Product() {}
	@ManyToMany(fetch=FetchType.LAZY,mappedBy="products")
	private Set<Order> orders = new HashSet<>();
	public int getId() {
		return id;
	}
	public void setId(int id) {		this.id = id;	}

	public String getName() {		return name;	}

	public void setName(String name) {		this.name = name;	}

	public double getPrice() {		return price;	}

	public void setPrice(double price) {		this.price = price;	}

	public Set<Order> getOrders() {		return orders;	}

	public void setOrders(Set<Order> orders) {		this.orders = orders;
	}
}




package com.insight.m2m;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
@Entity
@Table(name = "igorderm2m1")
public class Order  {
	@Id
	private int id;
	@Temporal(TemporalType.DATE)	//required for Date and Calendar Types
	@Column(name = "order_date")
	private Date purchaseDate;
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "product_orders", joinColumns = { @JoinColumn(name = "order_id") }, inverseJoinColumns = { @JoinColumn(name = "product_id") })
	private Set<Product> products = new HashSet<>();	//required to avoid NullPointerException
	 public Order() {}
	public int getId() {		return id;	}

	public void setId(int id) {		this.id = id;	}

	public Date getPurchaseDate() {		return purchaseDate;	}

	public void setPurchaseDate(Date purchaseDate) {	this.purchaseDate = purchaseDate;	}

	public Set<Product> getProducts() {		return products;	}

	public void setProducts(Set<Product> products) {		this.products = products;	}
	public void addProduct(Product product) {		this.getProducts().add(product);	}
	
}



package com.insight.m2m;
import java.util.Date;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
public class Client {
	public static void main(String[] args) {
		EntityManagerFactory factory = Persistence
				.createEntityManagerFactory("EM");
		EntityManager em = factory.createEntityManager();
		em.getTransaction().begin();
		// first define few products before we place order
		Product elecProduct = new Product();
		elecProduct.setId(11);
		elecProduct.setName("LED TV");
		elecProduct.setPrice(45000);
		Product beautyProduct = new Product();
		beautyProduct.setId(12);
		beautyProduct.setName("Face Wash");
		beautyProduct.setPrice(80);
		Product babyProduct = new Product();
		babyProduct.setId(13);
		babyProduct.setName("Pampers");
		babyProduct.setPrice(15);
		Product eleProduct = new Product();
		eleProduct.setId(14);
		eleProduct.setName("CFL Bulb");
		eleProduct.setPrice(250);
		// now define first order and add few products in it
		Order firstOrder = new Order();
		firstOrder.setId(1010);
		firstOrder.setPurchaseDate(new Date());
		firstOrder.addProduct(babyProduct);
		firstOrder.addProduct(elecProduct);
		firstOrder.addProduct(beautyProduct);
		// now define second order and add few products in it
		Order secondOrder = new Order();
		secondOrder.setId(1011);
		secondOrder.setPurchaseDate(new Date());
		secondOrder.addProduct(babyProduct);		
		secondOrder.addProduct(elecProduct);
		secondOrder.addProduct(eleProduct);
		// save orders using entity manager
		em.persist(firstOrder);
		em.persist(secondOrder);
		System.out.println("Added orders along with order details to database.");
		em.getTransaction().commit();
		em.close();
		factory.close();
	}
}
