<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.3</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
			<version>2.1.3</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


===========================================================

import java.time.Duration;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
//import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
@EnableDiscoveryClient
public class ConsumerappApplication {

	public static void main(String[] args) {
		SpringApplication.run(ConsumerappApplication.class, args);
	}
	
	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {

	    return builder.setConnectTimeout(Duration.ofMillis(300000))
	     .setReadTimeout(Duration.ofMillis(300000)).build();
	}
	

}

application.properties
============================
#spring.application.name=consumerapp
#server.port=8082
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka


application.yml
=================
eureka:
 client:
  serviceUrl:
   defaultZone: http://localhost:8761/eureka
   instance:
    preferIpAddress: true
spring:
 application:
  name: consumerapp
server:
 port: 8082
resilience4j:
 retry:
  instances:
   producer:
    max-attempts: 5
  instance:
   producerPort:
   max-attempts: 6

============================ConsumerController


package com.verizon.consumerapp.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
@RestController
public class DiscoveryController {
	@Autowired
	DiscoveryClient discoveryClient;
	@Autowired
	RestTemplate restTemplate;
	@GetMapping("/data")
	   public String getProduct() {                  
	    	List<ServiceInstance> siList = discoveryClient.getInstances("PRODUCERAPP");
	           ServiceInstance si = siList.get(0);
	            String url = si.getUri() +"/producer";
	         String response = restTemplate.getForObject(url, String.class);
	          System.out.println("using discovery client"+ response);
	            return response;
	      }
}


========================================================





import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;

@RestController
public class ConsumerController {
	@Autowired
	RestTemplate restTemplate;
	@Autowired 
		DiscoveryClient discoveryClient;
	 

	@GetMapping("/consumer") //white label 
	public String getMesssage() {
		String msg=restTemplate.getForObject("http://localhost:8081/producer", String.class);
		return   "Message from Producer :" + msg; //   "Consumer MEssage";
	}
    
   //need to comment method in producer 
   @GetMapping("/data1")
   @Retry(name="producer", fallbackMethod="sendDummyData")
   	@CircuitBreaker(name="producer", fallbackMethod="sendDummyData")
      	 public String getCources() {                  // http://localhost:8083/data1
            List<ServiceInstance> siList = discoveryClient.getInstances("PRODUCERAPP");
            ServiceInstance si = siList.get(0);
             String url = si.getUri() +"/producer";
            RestTemplate rt = new RestTemplate();
          String response = rt.getForObject(url, String.class);
           System.out.println("using discovery client"+ response);
             return response;
       }

   	public String sendDummyData(Exception e) {
   		return "Producer is unvailable,please go for other option";
   	}
   }

	
	
	